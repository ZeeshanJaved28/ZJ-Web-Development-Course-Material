Middlewares in Express Js

The concept of middleware is quite confusing One of the concepts to know is In express middleware plays a very important role and every JavaScript back end developer should know how to understand middleware.

npm init -y
npm i express@4
npm i --global nodemon

https://expressjs.com/en/starter/hello-world.html

const express = require("express");
const app = express();
const port = 3000;

app.get("/"->route, (req, res)->Handler => {
  res.send("Hello World!");
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

Request in and match route and then Response out.

Middleware modify the request.

https://expressjs.com/en/starter/static-files.html

app.use(express.static('public'))
create public folder and then create (.txt) file

https://expressjs.com/en/guide/writing-middleware.html

// Writing Middleware
const myLogger = function (req, res, next) {
  console.log('LOGGED')
  next()
}

app.use(myLogger)

// Middleware 01:
app.use((req, res, next) => {
  console.log("m1");
  next();
});
// Middleware 02:
app.use((req, res, next) => {
  console.log("m2");
  next();
});

// Middleware 01:
// app.use((req, res, next) => {
//   console.log("m1");
//   res.send("Hacked by Middleware 01")
// //   next();
// });

// app.use((req, res, next) => {
//   console.log("m1");
// //   res.send("Hacked by Middleware 01")
//   next();
// });

app.use((req, res, next) => {
    // fs.writeFileSync("logs.txt", `${Date.now()} is a ${req.method}/n`)
    fs.appendFileSync("logs.txt", `${Date.now()} is a ${req.method}\n`)
  console.log(`${Date.now()} is a ${req.method}`);
  //   res.send("Hacked by Middleware 01")
  next();
});

You can convert the stamp to time It is your job to do it comfortably using the date object.

In Middlewares, We initially modified the request.

app.use((req, res, next) => {
  console.log(req.headers);
  req.shani = "I'm Shani Bhai";

  fs.appendFileSync("logs.txt", `${Date.now()} is a ${req.method}\n`);
  console.log(`${Date.now()} is a ${req.method}`);
  //   res.send("Hacked by Middleware 01")
  next();
});

http://localhost:3000/about

What happens is that if you want to do something for all the requests from the middleware then create a middleware for all the requests If you want all the requests should be checked once to see if they are logged in or if they are not of the user then you can run the middleware.

https://expressjs.com/en/guide/routing.html

Q: What is a Middleware? 
A function that will run before every request In this case, it will run before every request for a blog And it has a request Object and a response object That is, it has the power to send a response And along with that, it has a request Object and a response object There is a request object as well and it can modify the request Here, it can Authentication can be done by checking the request headers And whatever else you need to do You can do it in the middleware and Finally The route can send the request to the handler So if you want to do something like this That runs for every route you can use middleware so I hope you understand.

// Middleware 02:
app.use((req, res, next) => {
  console.log("m2");
  req.shani = "I'm Zeeshan Bhai";
  next();
});

http://localhost:3000/about

Now I want to tell you guys that What are the types of middle ware If there are middle ware then we have five types of middle ware.

https://expressjs.com/en/guide/using-middleware.html

(1) Application-level middleware

app.use(express.static("public"));
app.use("/blog", blog);
app.use((req, res, next) => {
  console.log('Time:', Date.now())
  next()
})

(2) Router-level middleware

const express = require('express')
const router = express.Router()

// Middleware that is specific to this router
const timeLog = (req, res, next) => {
  console.log('Time: ', Date.now())
  next()
}
router.use(timeLog)

// define the home page route
router.get('/', (req, res) => {
  res.send('Birds home page')
})
// define the about route
router.get('/about', (req, res) => {
  res.send('About birds')
})

module.exports = router

(3) Error-handling middleware

app.use((err, req, res, next) => {
  console.error(err.stack)
  res.status(500).send('Something broke!')
})

(4) Built-in middleware

Express has the following built-in middleware functions:

(a)express.static serves static assets such as HTML files, images, and so on.
(b)express.json parses incoming requests with JSON payloads. NOTE: Available with Express 4.16.0+
(c)express.urlencoded parses incoming requests with URL-encoded payloads. NOTE: Available with Express 4.16.0+

(5) Third-party middleware

$ npm install cookie-parser

const express = require('express')
const app = express()
const cookieParser = require('cookie-parser')

// load the cookie-parsing middleware
app.use(cookieParser())